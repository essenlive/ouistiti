[
    {
        "id": "e761ac79c785e7a9",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "253f319105659b7b",
        "type": "junction",
        "z": "e761ac79c785e7a9",
        "x": 1300,
        "y": 520,
        "wires": [
            [
                "172c28f4f3d521dc",
                "1692f0f497bda03f",
                "b487a39e69720055"
            ]
        ]
    },
    {
        "id": "82a61d1a880bb18c",
        "type": "junction",
        "z": "e761ac79c785e7a9",
        "x": 1680,
        "y": 520,
        "wires": [
            [
                "5afc35a5f31661c1",
                "afec08709e268b09",
                "71a4e894ffee85ac"
            ]
        ]
    },
    {
        "id": "3e909098c5dfe4dc",
        "type": "junction",
        "z": "e761ac79c785e7a9",
        "x": 1160,
        "y": 560,
        "wires": [
            [
                "54a45be632231705",
                "da2283fc25bce35e"
            ]
        ]
    },
    {
        "id": "89ecb0bed69afef0",
        "type": "telegram bot",
        "botname": "ouistiti",
        "usernames": "",
        "chatids": "569095091, -449572690, -1001302926258, -621716050",
        "baseapiurl": "",
        "updatemode": "polling",
        "pollinterval": "300",
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": "6667",
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": "8443",
        "publicbotport": "8443",
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    },
    {
        "id": "45ae1af9b3b54cae",
        "type": "inject",
        "z": "e761ac79c785e7a9",
        "name": "Take Picture",
        "props": [
            {
                "p": "order",
                "v": "takePhoto",
                "vt": "str"
            },
            {
                "p": "path",
                "v": "./images/capture.jpg",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 540,
        "wires": [
            [
                "ef63e76b91d5df1f"
            ]
        ]
    },
    {
        "id": "08a98d8c54cc82e1",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Take picture",
        "func": "const fs = global.get('fs')\nconst camera = global.get(\"camera\")\nconst path = msg.payload.path;\ntry {\n    camera.takePicture({ targetPath: './foo.XXXXXX' },\n        function (error, tmpname) {\n            if (error) {\n                node.warn(\"error taking picture\")\n                node.warn(error)\n                node.send(null);\n                node.done();\n            }\n            fs.renameSync(tmpname, path);\n            node.status({ fill: \"green\", shape: \"dot\", text: path });\n            msg.payload.order = \"printImage\"\n            node.send(msg);\n            node.done();\n\n        });\n    \n} catch (error) {\n    node.warn(\"error caught\");\n    node.warn(error);    \n};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 600,
        "wires": [
            [
                "bcd102a12ebee1fe",
                "3e909098c5dfe4dc"
            ]
        ],
        "icon": "font-awesome/fa-camera"
    },
    {
        "id": "4a2f70a74b5dacaa",
        "type": "telegram receiver",
        "z": "e761ac79c785e7a9",
        "name": "ouistiti",
        "bot": "89ecb0bed69afef0",
        "saveDataDir": "./images",
        "filterCommands": false,
        "x": 230,
        "y": 480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "5afc35a5f31661c1",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Print image",
        "func": "const device = global.get('device')\nconst printer = global.get('printer')\nconst escpos = global.get('escpos')\n\nconst path = msg.payload.path;\n/*\nescpos.Image.load(msg.payload, (image) => {\n    node.warn(image)\n\n    if (typeof image.data !== 'undefined') {\n        device.open(function (error) {\n            if (error) {\n                node.warn(\"error\")\n                node.send(null)\n                node.done();\n            }\n            printer\n                .align('ct')\n                .feed(1)\n                .raster(image)\n                .feed(4)\n                .cut()\n                .close();\n        })\n        node.done();\n    }\n    else { \n        node.warn(\"error loading image\")\n        node.send(null)\n        node.done();\n        };\n})\n*/\n\n\n\nescpos.Image.load(\"./images/woma.png\", (logo) => {\n    if (typeof logo.data !== 'undefined') {\n        escpos.Image.load(path, (image) => {\n            if (typeof image.data !== 'undefined') {\n\n                device.open(function (error) {\n                    if (error) {\n                        node.warn(error);\n                        node.send(null)\n                    }\n\n                    printer\n                        .align('ct')\n                        .raster(logo)\n                        .feed(2)\n                        .raster(image)\n                        .feed(2)\n                        .cut()\n                        .close();\n                })\n            }\n            else {\n                node.warn(\"error loading image\")\n                node.send(null)\n                node.done();\n            };\n        })\n    }\n    else {\n        node.warn(\"error loading image\")\n        node.send(null)\n        node.done();\n    };\n})",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 520,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-print"
    },
    {
        "id": "2b700851b5584b6b",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Controller",
        "func": "switch (msg.payload.order) {\n    case \"printImage\":\n\n        return [msg, null, null, null];\n        break\n    case \"printText\":\n\n        return [null, msg, null, null];\n        break\n\n    case \"takePhoto\":\n\n        return [null, null, msg, null];\n        break\n\n    case \"cut\":\n\n        return [null, null, null, msg];\n        break\n\n    default:\n    return [null, null, null, null, null];\n            \n}\n",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 560,
        "wires": [
            [
                "253f319105659b7b"
            ],
            [
                "a14dce19bec287c9"
            ],
            [
                "2b1f2e60a688506a"
            ],
            [
                "abb1aa5669ce1b2c"
            ]
        ]
    },
    {
        "id": "afec08709e268b09",
        "type": "image viewer",
        "z": "e761ac79c785e7a9",
        "name": "",
        "width": 160,
        "data": "payload.path",
        "dataType": "msg",
        "active": false,
        "x": 1770,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "2a0558f0c58c9068",
        "type": "inject",
        "z": "e761ac79c785e7a9",
        "name": "Inject Lena",
        "props": [
            {
                "p": "order",
                "v": "printImage",
                "vt": "str"
            },
            {
                "p": "path",
                "v": "./images/lena.png",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 580,
        "wires": [
            [
                "ef63e76b91d5df1f"
            ]
        ]
    },
    {
        "id": "71a4e894ffee85ac",
        "type": "debug",
        "z": "e761ac79c785e7a9",
        "name": "prepared",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1780,
        "y": 560,
        "wires": []
    },
    {
        "id": "172c28f4f3d521dc",
        "type": "debug",
        "z": "e761ac79c785e7a9",
        "name": "initial",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 560,
        "wires": []
    },
    {
        "id": "71c2f02b2842e3e1",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Setup printer",
        "func": "const escpos = global.get('escpos')\nconst escposUSB = global.get('escposUSB')\n\nif (!global.get(\"printer\")){\n    try {\n        node.warn(\"Instantiating Printer\");\n        escpos.USB = escposUSB;\n        let device = new escpos.USB();\n        global.set(\"device\", device)\n        \n        let printer = new escpos.Printer(device);\n        global.set(\"printer\", printer)\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Printer initialized\" });\n        \n        node.send(msg);\n        node.done();\n\n    } catch (error) {\n        node.warn(error)\n        node.status({ fill: \"red\", shape: \"dot\", text: error });\n        node.send(null);\n        node.done();\n        };\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1020,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-print"
    },
    {
        "id": "1b31aa7d76811b33",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Connect to camera",
        "func": "const gphoto2 = global.get('gphoto2')\n\nif (!global.get(\"camera\")){\n    try {\n        var GPhoto = new gphoto2.GPhoto2();\n        GPhoto.list(function (list) {\n            node.warn(\"Instantiating camera\")\n            node.warn(list)\n\n            if (list.length === 0) {\n                node.status({ fill: \"error\", shape: \"dot\", text: \"no camera\" });\n                node.send(null);\n                return\n            }\n            else{\n                let camera = list[0];\n                global.set(\"camera\", camera);\n                node.warn(camera)\n                node.status({ fill: \"green\", shape: \"dot\", text: `initialized ${camera.model}` });\n                node.send(msg);\n            }\n        })\n        \n        } catch (error) {\n            node.warn(error)\n            node.status({ fill: \"error\", shape: \"dot\", text: error });\n            node.send(null);\n        };\n}\nelse{\n    try{\n        node.warn(\"Getting camera\")\n        let camera = global.get(\"camera\");\n        node.status({ fill: \"green\", shape: \"dot\", text: `initialized ${camera.model}` });\n        node.send(msg);\n\n    } catch (error) {\n        node.warn(error)\n        node.status({ fill: \"error\", shape: \"dot\", text: error });\n\n        node.send(null);\n    };\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 960,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-camera"
    },
    {
        "id": "058670a3d3b7593d",
        "type": "http in",
        "z": "e761ac79c785e7a9",
        "name": "",
        "url": "/insta",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "56695c4538c5e72e",
                "8dae72a5ee1ed01d"
            ]
        ]
    },
    {
        "id": "56695c4538c5e72e",
        "type": "http response",
        "z": "e761ac79c785e7a9",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 210,
        "y": 220,
        "wires": []
    },
    {
        "id": "65162f180d88f3df",
        "type": "http request",
        "z": "e761ac79c785e7a9",
        "name": "",
        "method": "GET",
        "ret": "bin",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 260,
        "wires": [
            [
                "253f319105659b7b"
            ]
        ]
    },
    {
        "id": "8dae72a5ee1ed01d",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Simplify",
        "func": "let newMsg = msg.payload;\nnewMsg.imagePath = \"./images/insta.jpg\";\nnewMsg.printPath = \"./images/print.jpg\";\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 260,
        "wires": [
            [
                "65162f180d88f3df"
            ]
        ]
    },
    {
        "id": "6677c29a940bee6a",
        "type": "restart",
        "z": "e761ac79c785e7a9",
        "name": "restart container",
        "x": 360,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "bfb2bebf07f2e53f",
        "type": "inject",
        "z": "e761ac79c785e7a9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1080,
        "wires": [
            [
                "6677c29a940bee6a"
            ]
        ]
    },
    {
        "id": "1692f0f497bda03f",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "dither Image",
        "func": "const sharp = global.get('sharp')\nconst file = msg.payload.path\n\n// dithering function, working off a sharp.js meta object + buffer data\nconst dither = ({ height, width, buffer }) => {\n    // performs pattern lookup\n    const bayer = (x, y, c0) => {\n        const clamp = val => (val < 0 ? 0 : val > 255 ? 255 : val)\n        // via http://devlog-martinsh.blogspot.com/2011/03/glsl-8x8-bayer-matrix-dithering.html\n        const pattern = [\n            [0, 32, 8, 40, 2, 34, 10, 42],   /* 8x8 Bayer ordered dithering  */\n            [48, 16, 56, 24, 50, 18, 58, 26],   /* pattern.  Each input pixel   */\n            [12, 44, 4, 36, 14, 46, 6, 38],   /* is scaled to the 0..63 range */\n            [60, 28, 52, 20, 62, 30, 54, 22],   /* before looking in this table */\n            [3, 35, 11, 43, 1, 33, 9, 41],   /* to determine the action.     */\n            [51, 19, 59, 27, 49, 17, 57, 25],\n            [15, 47, 7, 39, 13, 45, 5, 37],\n            [63, 31, 55, 23, 61, 29, 53, 21]\n        ]\n\n        // dithers to 100% black or white\n        if (clamp(c0 + pattern[x % 8][y % 8]) > 127) {\n            return 255\n        } else return 0\n    }\n\n    // given Sharp data object with width, height and raw-formatted uint8 buffer\n    for (let y = 0; y < height; y++) {\n        for (let x = 0; x < width; x++) {\n            let index = x + y * width // get position in 1d buffer array\n            buffer[index] = bayer(x, y, buffer[index])\n        }\n    }\n\n    return buffer;\n}\n\nlet { data, info } = await sharp(file)\n    .resize(512,512)\n    .toColourspace('b-w')\n    .rotate(180)\n    .raw()\n    .toBuffer({ resolveWithObject: true })\nlet dithered = await sharp(dither({ ...info, buffer : data }), {\n    raw: {\n        width: info.width,\n        height: info.height,\n        channels: 1,\n    }}).jpeg().withMetadata().toFile(file)\n\nmsg.image = dithered\nnode.send(msg);\nnode.done()\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 520,
        "wires": [
            [
                "7e24900f41f73543"
            ]
        ]
    },
    {
        "id": "1411b70ff8bfbe32",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Cut",
        "func": "const printer = global.get(\"printer\");\nconst device = global.get(\"device\");\n\nnode.status(\"Printing\");\n\ndevice.open(function (error) {\n    if (error) {\n        node.warn(\"error\")\n        node.warn(error)\n        return null\n    }\n    printer\n        .cut()\n        .close();\n        \n    node.status(\"\");\n\n})\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 640,
        "wires": [
            [
                "2df7a59571cd1cf5"
            ]
        ],
        "icon": "font-awesome/fa-print"
    },
    {
        "id": "b487a39e69720055",
        "type": "image viewer",
        "z": "e761ac79c785e7a9",
        "name": "",
        "width": 160,
        "data": "payload.path",
        "dataType": "msg",
        "active": false,
        "x": 1430,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "28268f277c204c3c",
        "type": "inject",
        "z": "e761ac79c785e7a9",
        "name": "Cut paper",
        "props": [
            {
                "p": "order",
                "v": "cut",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 660,
        "wires": [
            [
                "ef63e76b91d5df1f"
            ]
        ]
    },
    {
        "id": "a3127a0ece08c641",
        "type": "inject",
        "z": "e761ac79c785e7a9",
        "name": "Text",
        "props": [
            {
                "p": "content",
                "v": "Ciao les losers !",
                "vt": "str"
            },
            {
                "p": "invert",
                "v": "false",
                "vt": "bool"
            },
            {
                "p": "order",
                "v": "printText",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 230,
        "y": 620,
        "wires": [
            [
                "ef63e76b91d5df1f"
            ]
        ]
    },
    {
        "id": "a14dce19bec287c9",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Wrap text",
        "func": "const text = msg.content;\nconst char = \" \";\nconst wrapSize = 20;\n\nfunction getCharIndexes(string, char) {\n    const indexes = [];\n\n    for (let index = 0; index < string.length; index++) {\n        if (string[index] === char) {\n            indexes.push(index);\n        }\n    }\n    return indexes\n}\n\nfunction getSubstrings(string, indexes, wrapSize) {\n    indexes = [...indexes, string.length]\n    const subStrings = []\n    let currentSplit = 0\n    let substring;\n    indexes.forEach((el, i) => {\n\n        if ((el - currentSplit) >= wrapSize) {\n            if ((el - indexes[i - 1]) > wrapSize + 1) {\n                substring = string.slice(currentSplit + 1, currentSplit + wrapSize);\n                subStrings.push(substring + \"-\")\n                console.log([currentSplit, el], substring);\n                currentSplit = currentSplit + wrapSize;\n            }\n            else {\n                substring = string.slice(currentSplit === 0 ? 0 : currentSplit + 1, indexes[i - 1]);\n                subStrings.push(substring)\n                console.log([currentSplit, el], substring);\n                currentSplit = indexes[i - 1];\n            }\n        }\n        if (i === indexes.length - 1) {\n            substring = string.slice(currentSplit === 0 ? 0 : currentSplit + 1, string.length);\n            subStrings.push(substring)\n        }\n    });\n    return subStrings;\n}\n\n\nlet indexes = getCharIndexes(text, ' ')\nmsg.text = getSubstrings(text, indexes, wrapSize)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 560,
        "wires": [
            [
                "5b2f8850cf9bc535"
            ]
        ]
    },
    {
        "id": "5b2f8850cf9bc535",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Text2image",
        "func": "const sharp = global.get('sharp')\n\nconst width = 512;\nconst lineHeight = 40;\nconst margin = 15;\nconst separator = 5;\nlet text = ``;\n\nmsg.text.forEach((el, i) => { text = text + `<text x=\"50%\" y=\"${(i) * (lineHeight + 2 * separator) + (lineHeight + separator + margin)}\" text-anchor=\"middle\" class=\"title\">${el}</text>`});\nconst svgImage = `\n<svg width=\"${width}\" height=\"${(lineHeight + 2 * separator) * msg.text.length + 2 * margin}\">\n    <style>\n    .title { \n    fill: ${!msg.invert ? \"#fff\" : \"#000\"};\n    font-size: ${lineHeight}px;\n    font-weight: thin;\n    font-family : sans-serif;\n    }\n    </style>\n    <rect x=\"0\" y=\"0\" width=\"${width}\" height=\"${(lineHeight + 2 * separator) * msg.text.length + 2 * margin}\" style=\"fill: ${!msg.invert ? \"#000\" : \"#fff\"};\" />\n    ${text}\n</svg>\n`;\nconst svgBuffer = Buffer.from(svgImage);\nmsg.payload = await sharp(svgBuffer)\n    .jpeg()\n    .toBuffer()\n\nnode.send(msg);\nnode.done()\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 560,
        "wires": [
            [
                "bc8ce598864060b7",
                "3e909098c5dfe4dc"
            ]
        ]
    },
    {
        "id": "83858233b157e94f",
        "type": "rpi-gpio in",
        "z": "e761ac79c785e7a9",
        "name": "Button Press",
        "pin": "2",
        "intype": "up",
        "debounce": "25",
        "read": true,
        "bcm": true,
        "x": 210,
        "y": 340,
        "wires": [
            [
                "a77e28181d6a72bd"
            ]
        ]
    },
    {
        "id": "8854754336006cdd",
        "type": "switch",
        "z": "e761ac79c785e7a9",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "9854e2682a9b6f22"
            ]
        ]
    },
    {
        "id": "92610fe41ae87fe4",
        "type": "link in",
        "z": "e761ac79c785e7a9",
        "name": "loop",
        "links": [
            "ee26d4badb6c6008",
            "2df7a59571cd1cf5",
            "bcd102a12ebee1fe",
            "8776cbbf6ba03c82",
            "bc8ce598864060b7",
            "89cf16f5190a1d56"
        ],
        "x": 265,
        "y": 440,
        "wires": [
            [
                "2b700851b5584b6b"
            ]
        ]
    },
    {
        "id": "2df7a59571cd1cf5",
        "type": "link out",
        "z": "e761ac79c785e7a9",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "92610fe41ae87fe4"
        ],
        "x": 1105,
        "y": 640,
        "wires": []
    },
    {
        "id": "abb1aa5669ce1b2c",
        "type": "delay",
        "z": "e761ac79c785e7a9",
        "name": "Limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 640,
        "wires": [
            [
                "1411b70ff8bfbe32"
            ]
        ]
    },
    {
        "id": "bcd102a12ebee1fe",
        "type": "link out",
        "z": "e761ac79c785e7a9",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "92610fe41ae87fe4"
        ],
        "x": 1105,
        "y": 600,
        "wires": []
    },
    {
        "id": "bc8ce598864060b7",
        "type": "link out",
        "z": "e761ac79c785e7a9",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "92610fe41ae87fe4"
        ],
        "x": 1105,
        "y": 560,
        "wires": []
    },
    {
        "id": "54a45be632231705",
        "type": "debug",
        "z": "e761ac79c785e7a9",
        "name": "initial",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 540,
        "wires": []
    },
    {
        "id": "da2283fc25bce35e",
        "type": "image viewer",
        "z": "e761ac79c785e7a9",
        "name": "",
        "width": 160,
        "data": "payload.path",
        "dataType": "msg",
        "active": false,
        "x": 1230,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "a1c7029bfadb5982",
        "type": "inject",
        "z": "e761ac79c785e7a9",
        "name": "Initialize",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "71c2f02b2842e3e1",
                "1b31aa7d76811b33"
            ]
        ]
    },
    {
        "id": "7e24900f41f73543",
        "type": "delay",
        "z": "e761ac79c785e7a9",
        "name": "Limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1610,
        "y": 520,
        "wires": [
            [
                "82a61d1a880bb18c"
            ]
        ]
    },
    {
        "id": "2b1f2e60a688506a",
        "type": "delay",
        "z": "e761ac79c785e7a9",
        "name": "Limit",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "4",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 830,
        "y": 600,
        "wires": [
            [
                "08a98d8c54cc82e1"
            ]
        ]
    },
    {
        "id": "a77e28181d6a72bd",
        "type": "delay",
        "z": "e761ac79c785e7a9",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 380,
        "y": 340,
        "wires": [
            [
                "8854754336006cdd"
            ]
        ]
    },
    {
        "id": "9854e2682a9b6f22",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "Create order",
        "func": "let date = new Date();\nmsg.payload = [{\n        order: \"takePhoto\",\n        path: `./images/WoMa10-${date.getTime()}.jpg`\n}\n]\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 380,
        "wires": [
            [
                "89db2ccc956c3d32"
            ]
        ]
    },
    {
        "id": "89db2ccc956c3d32",
        "type": "split",
        "z": "e761ac79c785e7a9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 420,
        "wires": [
            [
                "2b700851b5584b6b",
                "d28a6386d3e4bdaa"
            ]
        ]
    },
    {
        "id": "ef63e76b91d5df1f",
        "type": "function",
        "z": "e761ac79c785e7a9",
        "name": "set msg to payload",
        "func": "msg.payload = msg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 580,
        "wires": [
            [
                "2b700851b5584b6b"
            ]
        ]
    },
    {
        "id": "c6c028b27f7af695",
        "type": "inject",
        "z": "e761ac79c785e7a9",
        "name": "manual",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "a77e28181d6a72bd"
            ]
        ]
    },
    {
        "id": "d28a6386d3e4bdaa",
        "type": "debug",
        "z": "e761ac79c785e7a9",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 440,
        "wires": []
    },
    {
        "id": "c7e341a0.381cc",
        "type": "http in",
        "z": "e761ac79c785e7a9",
        "name": "",
        "url": "/images",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1850,
        "y": 360,
        "wires": [
            [
                "2fb1c354.d04e3c"
            ]
        ]
    },
    {
        "id": "2fb1c354.d04e3c",
        "type": "file in",
        "z": "e761ac79c785e7a9",
        "name": "",
        "filename": "/tmp/node-red.png",
        "filenameType": "str",
        "format": "",
        "x": 2060,
        "y": 360,
        "wires": [
            [
                "c9e28681.361d78"
            ]
        ]
    },
    {
        "id": "c9e28681.361d78",
        "type": "change",
        "z": "e761ac79c785e7a9",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "image/png",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2210,
        "y": 360,
        "wires": [
            [
                "88974243.7768c"
            ]
        ]
    },
    {
        "id": "88974243.7768c",
        "type": "http response",
        "z": "e761ac79c785e7a9",
        "name": "",
        "x": 2350,
        "y": 360,
        "wires": []
    }
]